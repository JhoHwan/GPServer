// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROTOCOL_FLATBUFFER_H_
#define FLATBUFFERS_GENERATED_PROTOCOL_FLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

namespace Flatbuffer {

struct S_Test;
struct S_TestBuilder;

struct S_Test2;
struct S_Test2Builder;

struct Packet;
struct PacketBuilder;

enum PacketContent : uint8_t {
  PacketContent_NONE = 0,
  PacketContent_S_Test = 1,
  PacketContent_S_Test2 = 2,
  PacketContent_MIN = PacketContent_NONE,
  PacketContent_MAX = PacketContent_S_Test2
};

inline const PacketContent (&EnumValuesPacketContent())[3] {
  static const PacketContent values[] = {
    PacketContent_NONE,
    PacketContent_S_Test,
    PacketContent_S_Test2
  };
  return values;
}

inline const char * const *EnumNamesPacketContent() {
  static const char * const names[4] = {
    "NONE",
    "S_Test",
    "S_Test2",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketContent(PacketContent e) {
  if (::flatbuffers::IsOutRange(e, PacketContent_NONE, PacketContent_S_Test2)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPacketContent()[index];
}

template<typename T> struct PacketContentTraits {
  static const PacketContent enum_value = PacketContent_NONE;
};

template<> struct PacketContentTraits<Flatbuffer::S_Test> {
  static const PacketContent enum_value = PacketContent_S_Test;
};

template<> struct PacketContentTraits<Flatbuffer::S_Test2> {
  static const PacketContent enum_value = PacketContent_S_Test2;
};

bool VerifyPacketContent(::flatbuffers::Verifier &verifier, const void *obj, PacketContent type);
bool VerifyPacketContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct S_Test FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S_TestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4
  };
  uint16_t id() const {
    return GetField<uint16_t>(VT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_ID, 2) &&
           verifier.EndTable();
  }
};

struct S_TestBuilder {
  typedef S_Test Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint16_t id) {
    fbb_.AddElement<uint16_t>(S_Test::VT_ID, id, 0);
  }
  explicit S_TestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S_Test> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S_Test>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S_Test> CreateS_Test(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t id = 0) {
  S_TestBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct S_Test2 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef S_Test2Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_IDS = 8
  };
  uint16_t id() const {
    return GetField<uint16_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<uint16_t> *ids() const {
    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_IDS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_ID, 2) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_IDS) &&
           verifier.VerifyVector(ids()) &&
           verifier.EndTable();
  }
};

struct S_Test2Builder {
  typedef S_Test2 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(uint16_t id) {
    fbb_.AddElement<uint16_t>(S_Test2::VT_ID, id, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(S_Test2::VT_NAME, name);
  }
  void add_ids(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> ids) {
    fbb_.AddOffset(S_Test2::VT_IDS, ids);
  }
  explicit S_Test2Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<S_Test2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<S_Test2>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<S_Test2> CreateS_Test2(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> ids = 0) {
  S_Test2Builder builder_(_fbb);
  builder_.add_ids(ids);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<S_Test2> CreateS_Test2Direct(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t id = 0,
    const char *name = nullptr,
    const std::vector<uint16_t> *ids = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto ids__ = ids ? _fbb.CreateVector<uint16_t>(*ids) : 0;
  return Flatbuffer::CreateS_Test2(
      _fbb,
      id,
      name__,
      ids__);
}

struct Packet FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTENT_TYPE = 4,
    VT_CONTENT = 6
  };
  Flatbuffer::PacketContent content_type() const {
    return static_cast<Flatbuffer::PacketContent>(GetField<uint8_t>(VT_CONTENT_TYPE, 0));
  }
  const void *content() const {
    return GetPointer<const void *>(VT_CONTENT);
  }
  template<typename T> const T *content_as() const;
  const Flatbuffer::S_Test *content_as_S_Test() const {
    return content_type() == Flatbuffer::PacketContent_S_Test ? static_cast<const Flatbuffer::S_Test *>(content()) : nullptr;
  }
  const Flatbuffer::S_Test2 *content_as_S_Test2() const {
    return content_type() == Flatbuffer::PacketContent_S_Test2 ? static_cast<const Flatbuffer::S_Test2 *>(content()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CONTENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           VerifyPacketContent(verifier, content(), content_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Flatbuffer::S_Test *Packet::content_as<Flatbuffer::S_Test>() const {
  return content_as_S_Test();
}

template<> inline const Flatbuffer::S_Test2 *Packet::content_as<Flatbuffer::S_Test2>() const {
  return content_as_S_Test2();
}

struct PacketBuilder {
  typedef Packet Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_content_type(Flatbuffer::PacketContent content_type) {
    fbb_.AddElement<uint8_t>(Packet::VT_CONTENT_TYPE, static_cast<uint8_t>(content_type), 0);
  }
  void add_content(::flatbuffers::Offset<void> content) {
    fbb_.AddOffset(Packet::VT_CONTENT, content);
  }
  explicit PacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Packet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Packet>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Packet> CreatePacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Flatbuffer::PacketContent content_type = Flatbuffer::PacketContent_NONE,
    ::flatbuffers::Offset<void> content = 0) {
  PacketBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_content_type(content_type);
  return builder_.Finish();
}

inline bool VerifyPacketContent(::flatbuffers::Verifier &verifier, const void *obj, PacketContent type) {
  switch (type) {
    case PacketContent_NONE: {
      return true;
    }
    case PacketContent_S_Test: {
      auto ptr = reinterpret_cast<const Flatbuffer::S_Test *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketContent_S_Test2: {
      auto ptr = reinterpret_cast<const Flatbuffer::S_Test2 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyPacketContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPacketContent(
        verifier,  values->Get(i), types->GetEnum<PacketContent>(i))) {
      return false;
    }
  }
  return true;
}

inline const Flatbuffer::Packet *GetPacket(const void *buf) {
  return ::flatbuffers::GetRoot<Flatbuffer::Packet>(buf);
}

inline const Flatbuffer::Packet *GetSizePrefixedPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Flatbuffer::Packet>(buf);
}

inline bool VerifyPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Flatbuffer::Packet>(nullptr);
}

inline bool VerifySizePrefixedPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Flatbuffer::Packet>(nullptr);
}

inline void FinishPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Flatbuffer::Packet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Flatbuffer::Packet> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Flatbuffer

#endif  // FLATBUFFERS_GENERATED_PROTOCOL_FLATBUFFER_H_
