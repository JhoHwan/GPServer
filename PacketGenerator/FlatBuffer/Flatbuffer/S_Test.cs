// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Flatbuffer
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct S_Test : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
  public static S_Test GetRootAsS_Test(ByteBuffer _bb) { return GetRootAsS_Test(_bb, new S_Test()); }
  public static S_Test GetRootAsS_Test(ByteBuffer _bb, S_Test obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S_Test __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }

  public static Offset<Flatbuffer.S_Test> CreateS_Test(FlatBufferBuilder builder,
      ushort id = 0) {
    builder.StartTable(1);
    S_Test.AddId(builder, id);
    return S_Test.EndS_Test(builder);
  }

  public static void StartS_Test(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddId(FlatBufferBuilder builder, ushort id) { builder.AddUshort(0, id, 0); }
  public static Offset<Flatbuffer.S_Test> EndS_Test(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Flatbuffer.S_Test>(o);
  }
}


}
